import { stdin as input, stdout as output } from "node:process";
import * as readline from "node:readline/promises";
import OpenAI from "openai";
import { config } from "dotenv";
import pino from "pino";
import pretty from "pino-pretty";
import { WebSocketServer, WebSocket } from 'ws';
import { createServer as createHttpsServer } from 'https';
import { createServer as createHttpServer } from 'http';
import { IncomingMessage } from 'http';
import * as fs from 'fs';
import * as path from 'path';
import { conversationMemory, ConversationMemoryStore } from './lib/memory-store.js';
import type { ConversationMessage, ConversationSession, UserProfile } from './lib/memory-store.js';

// Load environment variables
config();

// Configure logger
const logger = pino(pretty({ colorize: true }));

// Configuration
const OPENROUTER_API_KEY = "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";
// const MODEL_NAME = process.env.LLM_MODEL || "meta-llama/llama-3-70b-instruct";
const MODEL_NAME = process.env.LLM_MODEL || "deepseek/deepseek-chat-v3-0324:free";
const DISABLE_THINKING = process.env.DISABLE_THINKING === "true" || true;
const MCP_SERVER_URL = process.env.MCP_URL || "http://localhost:8000";
const WEBSOCKET_PORT = process.env.WEBSOCKET_PORT || 8001;
const USE_WSS = process.env.USE_WSS === "true" || true; // Enable WSS by default
const USE_HTTPS = process.env.USE_HTTPS === "true" || false;

// OpenAI client configured for OpenRouter
const openai = new OpenAI({
    apiKey: OPENROUTER_API_KEY,
    baseURL: "https://openrouter.ai/api/v1",
});

// WebSocket server for real-time chat
let wss: WebSocketServer | null = null;
let httpServer: any = null; // Use any to handle both HTTP and HTTPS server types

// Helper function to convert MCP tool definitions to OpenAI format
function convertToolFormat(tool: any): any {
    return {
        type: "function",
        function: {
            name: tool.name,
            description: tool.description,
            parameters: {
                type: "object",
                properties: tool.inputSchema?.properties || {},
                required: tool.inputSchema?.required || []
            }
        }
    };
}

class AliconconMCPClient {
    private rl: readline.Interface;
    private availableTools: any[] = [];
    private connectedClients: Map<WebSocket, string> = new Map(); // ws -> socketId
    private socketClients: Map<string, WebSocket> = new Map(); // socketId -> ws
    private memoryStore: ConversationMemoryStore; // Th√™m property cho memoryStore

    constructor() {
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        this.memoryStore = conversationMemory; // Kh·ªüi t·∫°o memoryStore
    }

    async connectToServer(): Promise<boolean> {
        try {
            logger.info("üîó Connecting to Aliconcon MCP Server...");

            // Test MCP server connection
            const healthResponse = await fetch(`${MCP_SERVER_URL}/health`);
            if (!healthResponse.ok) {
                throw new Error(`Health check failed: ${healthResponse.status}`);
            }

            // Get available tools
            const toolsResponse = await fetch(`${MCP_SERVER_URL}/tools`);
            if (!toolsResponse.ok) {
                throw new Error(`Tools fetch failed: ${toolsResponse.status}`);
            }

            const toolsData = await toolsResponse.json() as any;
            this.availableTools = toolsData.result?.tools || [];

            logger.info("‚úÖ Connected to MCP server with tools:", this.availableTools.map((tool: any) => tool.name));

            return true;
        } catch (error) {
            logger.error("‚ùå Failed to connect to MCP server:", error);
            return false;
        }
    }

    async callMCPTool(toolName: string, toolArgs: any): Promise<string> {
        try {
            const response = await fetch(`${MCP_SERVER_URL}/tools/call`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    name: toolName,
                    arguments: toolArgs
                })
            });

            if (!response.ok) {
                throw new Error(`Tool call failed: ${response.status}`);
            }

            const result = await response.json() as any;

            // Extract content from MCP response
            if (result.result?.content) {
                if (Array.isArray(result.result.content)) {
                    return result.result.content.map((c: any) => c.text || JSON.stringify(c)).join('\n');
                } else {
                    return result.result.content;
                }
            }

            return JSON.stringify(result.result, null, 2);
        } catch (error) {
            logger.error(`‚ùå Error calling tool ${toolName}:`, error);
            throw error;
        }
    }

    async processQueryWithMemory(socketId: string, query: string, context: any = {}): Promise<string> {
        try {
            // Get conversation history from Redis
            const conversationHistory = await conversationMemory.getConversationHistory(socketId, 10);
            const sessionContext = await conversationMemory.getContext(socketId);

            // Update context with new information
            await conversationMemory.updateContext(socketId, context);

            // Add user message to memory
            await conversationMemory.addMessage(socketId, {
                id: Date.now().toString(),
                content: query,
                role: 'user',
                timestamp: new Date(),
                context
            });

            // Convert conversation history to OpenAI format
            const messages: OpenAI.Chat.Completions.ChatCompletionMessageParam[] = [
                {
                    role: "system",
                    content: `B·∫°n l√† tr·ª£ l√Ω AI c·ªßa Aliconcon - n·ªÅn t·∫£ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ h√†ng ƒë·∫ßu Vi·ªát Nam.

QUAN TR·ªåNG: Tr·∫£ l·ªùi b·∫±ng Markdown format ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp tr√™n web.

TH√îNG TIN V·ªÄ ALICONCON:
- Aliconcon l√† n·ªÅn t·∫£ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ ƒëa d·∫°ng v·ªõi h√†ng tri·ªáu s·∫£n ph·∫©m
- Chuy√™n cung c·∫•p c√°c s·∫£n ph·∫©m: ƒëi·ªán t·ª≠, th·ªùi trang, gia d·ª•ng, s√°ch, ƒë·ªì ch∆°i
- C√≥ h·ªá th·ªëng giao h√†ng nhanh to√†n qu·ªëc
- H·ªó tr·ª£ thanh to√°n ƒëa d·∫°ng: COD, chuy·ªÉn kho·∫£n, v√≠ ƒëi·ªán t·ª≠
- C√≥ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i v√† t√≠ch ƒëi·ªÉm th∆∞·ªùng xuy√™n
- H·ªó tr·ª£ kh√°ch h√†ng 24/7

NG·ªÆ C·∫¢NH PHI√äN L√ÄM VI·ªÜC:
${JSON.stringify(sessionContext, null, 2)}

L·ªäCH S·ª¨ CU·ªòC TR√í CHUY·ªÜN:
${conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\n')}

S·ª≠ d·ª•ng th√¥ng tin tr√™n ƒë·ªÉ tr·∫£ l·ªùi m·ªôt c√°ch c√° nh√¢n h√≥a v√† ch√≠nh x√°c.`
                },
                {
                    role: "user",
                    content: query
                }
            ];

            // Convert tools to OpenAI format
            const availableTools = this.availableTools.map(convertToolFormat);

            logger.info(`üõ†Ô∏è Processing query for socket ${socketId} with ${conversationHistory.length} previous messages`);

            let useTools = availableTools.length > 0;

            try {
                // Call OpenRouter with tools
                const response = await openai.chat.completions.create({
                    model: MODEL_NAME,
                    messages: messages,
                    tools: useTools ? availableTools : undefined,
                    temperature: 0.7,
                    max_tokens: 2048
                });

                const message = response.choices[0]?.message;
                if (!message) {
                    throw new Error("No message received from OpenRouter");
                }

                let finalText: string[] = [];
                let toolCalls: any[] = [];

                // Handle tool calls if any
                if (message.tool_calls && message.tool_calls.length > 0) {
                    logger.info(`‚úÖ Tool calling supported! Processing ${message.tool_calls.length} tool calls`);

                    for (const toolCall of message.tool_calls) {
                        const toolName = toolCall.function.name;
                        const toolArgs = JSON.parse(toolCall.function.arguments || "{}");

                        logger.info(`üîß Calling tool: ${toolName} with args:`, toolArgs);

                        try {
                            // Execute tool call via MCP HTTP API
                            const result = await this.callMCPTool(toolName, toolArgs);

                            toolCalls.push({
                                name: toolName,
                                args: toolArgs,
                                result: result
                            });

                            // Add tool result to messages for final response
                            messages.push({
                                role: "assistant",
                                content: message.content || "",
                                tool_calls: message.tool_calls
                            });

                            messages.push({
                                role: "tool",
                                tool_call_id: toolCall.id,
                                content: result
                            });

                            logger.info(`‚úÖ Tool ${toolName} executed successfully`);

                        } catch (error) {
                            logger.error(`‚ùå Error calling tool ${toolName}:`, error);
                            messages.push({
                                role: "tool",
                                tool_call_id: toolCall.id,
                                content: `Error: ${error}`
                            });
                        }
                    }

                    // Get final response after tool execution
                    const finalResponse = await openai.chat.completions.create({
                        model: MODEL_NAME,
                        messages: messages,
                        max_tokens: 1000,
                        temperature: 0.7
                    });

                    const finalMessage = finalResponse.choices[0]?.message;
                    if (!finalMessage) {
                        throw new Error("No final message received from OpenRouter");
                    }

                    finalText.push(finalMessage.content || "");
                } else {
                    // No tool calls, just return the response
                    logger.info("‚ÑπÔ∏è No tool calls made, returning direct response");
                    finalText.push(message.content || "");
                }

                const aiResponse = finalText.join('\n');

                // Add AI response to memory
                await conversationMemory.addMessage(socketId, {
                    id: (Date.now() + 1).toString(),
                    content: aiResponse,
                    role: 'assistant',
                    timestamp: new Date(),
                    toolCalls: toolCalls.length > 0 ? toolCalls : undefined
                });

                return aiResponse;

            } catch (toolError: any) {
                // If tool calling fails, fall back to context-aware mode
                if (toolError.message?.includes('404') && toolError.message?.includes('tool use')) {
                    logger.warn("üîÑ Tool calling not supported by this model, falling back to context-aware mode");
                    return await this.processQueryWithoutTools(socketId, query, context, conversationHistory);
                }

                if (toolError.message?.includes('tool') || toolError.message?.includes('function')) {
                    logger.warn("üîÑ Tool-related error detected, falling back to context-aware mode");
                    return await this.processQueryWithoutTools(socketId, query, context, conversationHistory);
                }

                throw toolError;
            }

        } catch (error) {
            console.log({
                error
            })
            logger.error("‚ùå Error processing query with memory:", error);

            // Fallback processing
            return await this.processQueryWithoutTools(socketId, query, context, []);
        }
    }

    async processQueryWithoutTools(socketId: string, query: string, context: any = {}, conversationHistory: ConversationMessage[] = []): Promise<string> {
        try {
            const sessionContext = await conversationMemory.getContext(socketId);

            const contextPrompt = `B·∫°n l√† tr·ª£ l√Ω AI c·ªßa Aliconcon - n·ªÅn t·∫£ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ h√†ng ƒë·∫ßu Vi·ªát Nam.

QUAN TR·ªåNG: Tr·∫£ l·ªùi b·∫±ng Markdown format ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp tr√™n web.

TH√îNG TIN V·ªÄ ALICONCON:
- Aliconcon l√† n·ªÅn t·∫£ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ ƒëa d·∫°ng v·ªõi h√†ng tri·ªáu s·∫£n ph·∫©m
- Chuy√™n cung c·∫•p c√°c s·∫£n ph·∫©m: ƒëi·ªán t·ª≠, th·ªùi trang, gia d·ª•ng, s√°ch, ƒë·ªì ch∆°i
- C√≥ h·ªá th·ªëng giao h√†ng nhanh to√†n qu·ªëc
- H·ªó tr·ª£ thanh to√°n ƒëa d·∫°ng: COD, chuy·ªÉn kho·∫£n, v√≠ ƒëi·ªán t·ª≠
- C√≥ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i v√† t√≠ch ƒëi·ªÉm th∆∞·ªùng xuy√™n
- H·ªó tr·ª£ kh√°ch h√†ng 24/7

S·∫¢N PH·∫®M PH·ªî BI·∫æN:
- iPhone 15 Pro Max - 29.990.000ƒë
- Samsung Galaxy S24 Ultra - 26.990.000ƒë  
- MacBook Air M3 - 28.990.000ƒë
- √Åo thun nam basic - 199.000ƒë
- Gi√†y sneaker n·ªØ - 899.000ƒë
- N·ªìi c∆°m ƒëi·ªán Panasonic - 1.290.000ƒë

NG·ªÆ C·∫¢NH PHI√äN L√ÄM VI·ªÜC:
${JSON.stringify(sessionContext, null, 2)}

L·ªäCH S·ª¨ CU·ªòC TR√í CHUY·ªÜN:
${conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\n')}

Context t·ª´ website: ${JSON.stringify(context, null, 2)}

C√¢u h·ªèi c·ªßa kh√°ch h√†ng: ${query}`;

            const response = await openai.chat.completions.create({
                model: MODEL_NAME,
                messages: [{ role: "user", content: contextPrompt }],
                temperature: 0.7,
                max_tokens: 1500
            });

            const message = response.choices[0]?.message;
            if (!message) {
                throw new Error("No message received from OpenRouter");
            }

            const aiResponse = message.content || "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω c√¢u h·ªèi n√†y l√∫c n√†y.";

            // Add to memory
            await conversationMemory.addMessage(socketId, {
                id: (Date.now() + 1).toString(),
                content: aiResponse,
                role: 'assistant',
                timestamp: new Date()
            });

            return aiResponse;

        } catch (error) {
            logger.error("‚ùå Error in fallback mode:", error);

            // Ultimate fallback with static responses
            return this.getStaticResponse(query);
        }
    }

    getStaticResponse(query: string): string {
        const lowerQuery = query.toLowerCase();

        if (lowerQuery.includes('gi·ªõi thi·ªáu') || lowerQuery.includes('aliconcon') || lowerQuery.includes('v·ªÅ')) {
            return `# üõçÔ∏è Ch√†o m·ª´ng ƒë·∫øn v·ªõi Aliconcon!

**Aliconcon** l√† n·ªÅn t·∫£ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ h√†ng ƒë·∫ßu Vi·ªát Nam v·ªõi:

## ‚ú® ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t:
- H√†ng tri·ªáu s·∫£n ph·∫©m ƒëa d·∫°ng
- Giao h√†ng nhanh to√†n qu·ªëc
- Thanh to√°n an to√†n, ƒëa d·∫°ng
- H·ªó tr·ª£ kh√°ch h√†ng 24/7
- Ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i h·∫•p d·∫´n

*B·∫°n c√≥ mu·ªën t√¨m hi·ªÉu v·ªÅ s·∫£n ph·∫©m n√†o c·ª• th·ªÉ kh√¥ng?*`;
        }

        // Default response
        return `# ü§ñ Tr·ª£ l√Ω Aliconcon

**Xin ch√†o!** T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:

- üè™ **T√¨m hi·ªÉu v·ªÅ n·ªÅn t·∫£ng Aliconcon**
- üõçÔ∏è **Xem s·∫£n ph·∫©m b√°n ch·∫°y v√† khuy·∫øn m√£i**
- üí° **H∆∞·ªõng d·∫´n mua h√†ng v√† thanh to√°n**
- üìû **H·ªó tr·ª£ d·ªãch v·ª• kh√°ch h√†ng**

*Vui l√≤ng cho t√¥i bi·∫øt b·∫°n c·∫ßn h·ªó tr·ª£ g√¨ c·ª• th·ªÉ!*`;
    }

    // Generate unique socket ID
    generateSocketId(): string {
        return `socket_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    // WebSocket server setup with memory integration
    async startWebSocketServer(): Promise<void> {
        return new Promise(async (resolve, reject) => {
            try {
                // Create HTTPS server for WSS (WebSocket Secure)
                if (USE_WSS) {
                    try {
                        const certPath = path.join(process.cwd(), 'certificates');
                        const keyPath = path.join(certPath, 'key.pem');
                        const certFilePath = path.join(certPath, 'cert.pem');

                        // Check if certificates exist
                        if (!fs.existsSync(keyPath) || !fs.existsSync(certFilePath)) {
                            logger.warn("üîí SSL certificates not found, generating self-signed certificates...");
                            await this.generateSelfSignedCertificates();
                        }

                        httpServer = createHttpsServer({
                            key: fs.readFileSync(keyPath),
                            cert: fs.readFileSync(certFilePath)
                        });
                        logger.info("üîí HTTPS server created for WSS (WebSocket Secure)");
                    } catch (error) {
                        logger.error("‚ùå Failed to setup HTTPS for WSS:", error);
                        logger.info("üîÑ Falling back to HTTP/WS...");
                        httpServer = createHttpsServer({
                            key: fs.readFileSync(path.join(process.cwd(), 'certificates', 'key.pem')),
                            cert: fs.readFileSync(path.join(process.cwd(), 'certificates', 'cert.pem'))
                        });
                    }
                } else {
                    // Fallback to HTTP for WS
                    httpServer = createHttpServer();
                    logger.info("üåê HTTP server created for WS (WebSocket)");
                }

                // Create WebSocket server
                wss = new WebSocketServer({
                    server: httpServer,
                    path: '/chat'
                });

                wss.on('connection', (ws: WebSocket, request: IncomingMessage) => {
                    const socketId = this.generateSocketId();

                    // Store client mapping
                    this.connectedClients.set(ws, socketId);
                    this.socketClients.set(socketId, ws);

                    logger.info(`üîå New WebSocket client connected: ${socketId}`);

                    // Send welcome message
                    this.sendToClient(ws, {
                        type: 'welcome',
                        message: 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi Aliconcon AI Assistant!',
                        timestamp: new Date().toISOString(),
                        socketId,
                        secure: USE_WSS
                    });

                    // Handle incoming messages
                    ws.on('message', async (data: Buffer) => {
                        try {
                            const message = JSON.parse(data.toString());
                            await this.handleWebSocketMessage(ws, message, socketId);
                        } catch (error) {
                            logger.error('‚ùå Error parsing WebSocket message:', error);
                            this.sendToClient(ws, {
                                type: 'error',
                                message: 'Invalid message format',
                                timestamp: new Date().toISOString()
                            });
                        }
                    });

                    // Handle client disconnect
                    ws.on('close', async () => {
                        logger.info(`üîå WebSocket client disconnected: ${socketId}`);

                        // Cleanup mappings
                        this.connectedClients.delete(ws);
                        this.socketClients.delete(socketId);

                        // Optional: Keep conversation in Redis or clean it up
                        // await conversationMemory.removeSession(socketId);
                    });

                    // Handle errors
                    ws.on('error', (error: Error) => {
                        logger.error(`‚ùå WebSocket error for client ${socketId}:`, error);
                        this.connectedClients.delete(ws);
                        this.socketClients.delete(socketId);
                    });
                });

                // Start server
                httpServer.listen(WEBSOCKET_PORT, () => {
                    const protocol = USE_WSS ? 'wss' : 'ws';
                    const serverType = USE_WSS ? 'WSS (Secure WebSocket)' : 'WS (WebSocket)';
                    logger.info(`üöÄ ${serverType} server running on ${protocol}://localhost:${WEBSOCKET_PORT}/chat`);
                    logger.info(`üìä Redis Memory: ${conversationMemory.isRedisConnected() ? 'Connected' : 'Disconnected'}`);

                    if (USE_WSS) {
                        logger.info("üîí SSL/TLS encryption enabled for secure WebSocket connections");
                        logger.info("üåê Client connection URL: wss://localhost:8001/chat");
                    } else {
                        logger.info("üåê Client connection URL: ws://localhost:8001/chat");
                    }

                    resolve();
                });

                httpServer.on('error', (error: Error) => {
                    logger.error('‚ùå Server error:', error);
                    reject(error);
                });

            } catch (error) {
                logger.error('‚ùå Failed to start WebSocket server:', error);
                reject(error);
            }
        });
    }

    // Generate self-signed certificates for WSS
    async generateSelfSignedCertificates(): Promise<void> {
        const { execSync } = await import('child_process');
        const certDir = path.join(process.cwd(), 'certificates');

        // Create certificates directory if it doesn't exist
        if (!fs.existsSync(certDir)) {
            fs.mkdirSync(certDir, { recursive: true });
        }

        const keyPath = path.join(certDir, 'key.pem');
        const certPath = path.join(certDir, 'cert.pem');

        try {
            // Generate self-signed certificate with SAN for localhost and Tailscale domain
            const subjectAltName = 'DNS:localhost,DNS:aliconcon.tail61bbbd.ts.net,IP:127.0.0.1';

            execSync(`openssl req -x509 -newkey rsa:4096 -keyout "${keyPath}" -out "${certPath}" -days 365 -nodes -subj "/C=VN/ST=HCM/L=HoChiMinh/O=Aliconcon/CN=localhost" -addext "subjectAltName=${subjectAltName}"`, {
                stdio: 'pipe'
            });

            logger.info("üîí Self-signed SSL certificates generated successfully");
            logger.info(`üîë Private key: ${keyPath}`);
            logger.info(`üìú Certificate: ${certPath}`);
            logger.info("üåê Valid for: localhost, aliconcon.tail61bbbd.ts.net, 127.0.0.1");

        } catch (error) {
            logger.error("‚ùå Failed to generate SSL certificates:", error);
            logger.warn("üí° Make sure OpenSSL is installed: sudo apt-get install openssl");
            throw error;
        }
    }

    // Handle WebSocket messages from clients
    async handleWebSocketMessage(ws: WebSocket, message: any, socketId: string): Promise<void> {
        try {
            console.log(`üì® [${socketId}] Received message:`, message);

            switch (message.type) {
                case 'init_profile':
                    await this.handleInitProfile(ws, message, socketId);
                    break;

                case 'chat':
                    await this.handleChatMessage(ws, message, socketId);
                    break;

                case 'get_conversation_history':
                    await this.handleGetConversationHistory(ws, socketId);
                    break;

                case 'clear_conversation':
                    await this.handleClearConversation(ws, socketId);
                    break;

                case 'ping':
                    this.sendToClient(ws, {
                        type: 'pong',
                        timestamp: new Date().toISOString()
                    });
                    break;

                default:
                    this.sendToClient(ws, {
                        type: 'error',
                        message: `Unknown message type: ${message.type}`,
                        timestamp: new Date().toISOString()
                    });
            }
        } catch (error: any) {
            console.error(`‚ùå [${socketId}] Error handling message:`, error);
            this.sendToClient(ws, {
                type: 'error',
                message: 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω tin nh·∫Øn',
                error: error.message,
                timestamp: new Date().toISOString()
            });
        }
    }

    async handleInitProfile(ws: WebSocket, message: any, socketId: string): Promise<void> {
        try {
            const { accessToken, context } = message;

            console.log(`üîê [${socketId}] Initializing profile...`);

            // Call tool to get user profile
            let profileResponse: string;
            let userProfile: UserProfile;
            let cartInfo: any = null;

            if (accessToken) {
                profileResponse = await this.callMCPTool('get-user-profile', { accessToken });

                // Also get cart information if user is logged in
                try {
                    const cartResponse = await this.callMCPTool('get-cart', { accessToken });
                    cartInfo = JSON.parse(cartResponse);
                    console.log(`üõí [${socketId}] Cart info loaded:`, cartInfo.cartItemCount || 0, 'items');
                } catch (cartError) {
                    console.log(`‚ö†Ô∏è [${socketId}] Could not load cart:`, cartError);
                }
            } else {
                profileResponse = await this.callMCPTool('get-user-profile', {});
            }

            try {
                const profileData = JSON.parse(profileResponse);
                profileData.user_avatar = 'https://aliconcon.tail61bbbd.ts.net:4000/media/' + profileData.user_avatar;

                userProfile = {
                    ...profileData,
                };
            } catch (parseError) {
                console.error('‚ùå Error parsing profile response:', parseError);
                // Fallback to guest user
                userProfile = {
                    _id: "guest",
                    user_fullName: "Kh√°ch",
                    user_email: null,
                    phoneNumber: null,
                    user_role: "guest",
                    user_avatar: null,
                    user_sex: null,
                    user_status: "active",
                    user_dayOfBirth: null,
                    role_name: "USER",
                    isGuest: true,
                    accessToken: accessToken || undefined
                };
            }

            // Save profile to Redis
            await this.memoryStore.saveUserProfile(socketId, userProfile);

            // Save cart info to context if available
            if (cartInfo) {
                await this.memoryStore.updateContext(socketId, {
                    ...context,
                    cartInfo: cartInfo
                });
            }

            // Generate welcome message based on profile and cart
            const welcomeMessage = this.generateWelcomeMessage(userProfile, context, cartInfo);

            // Send welcome response
            this.sendToClient(ws, {
                type: 'profile_initialized',
                profile: userProfile,
                welcomeMessage: welcomeMessage,
                cartInfo: cartInfo,
                timestamp: new Date().toISOString()
            });

            // Add welcome message to conversation history
            await this.memoryStore.addMessage(socketId, {
                id: `welcome_${Date.now()}`,
                content: welcomeMessage,
                role: 'assistant',
                timestamp: new Date(),
                context: { isWelcomeMessage: true }
            });

            console.log(`‚úÖ [${socketId}] Profile initialized for user: ${userProfile.user_fullName}`);

        } catch (error: any) {
            console.error(`‚ùå [${socketId}] Error initializing profile:`, error);

            // Send error response
            this.sendToClient(ws, {
                type: 'profile_error',
                message: 'Kh√¥ng th·ªÉ kh·ªüi t·∫°o profile ng∆∞·ªùi d√πng',
                error: error.message,
                timestamp: new Date().toISOString()
            });
        }
    }

    generateWelcomeMessage(profile: UserProfile, context?: any, cartInfo?: any): string {
        const currentTime = new Date();
        const hour = currentTime.getHours();

        let timeGreeting = '';
        if (hour < 12) {
            timeGreeting = 'Ch√†o bu·ªïi s√°ng';
        } else if (hour < 18) {
            timeGreeting = 'Ch√†o bu·ªïi chi·ªÅu';
        } else {
            timeGreeting = 'Ch√†o bu·ªïi t·ªëi';
        }

        let personalGreeting = '';
        let roleInfo = '';

        if (profile.isGuest) {
            personalGreeting = `${timeGreeting}! Xin ch√†o b·∫°n`;
            roleInfo = "B·∫°n ƒëang truy c·∫≠p v·ªõi t∆∞ c√°ch kh√°ch. H√£y ƒëƒÉng nh·∫≠p ƒë·ªÉ c√≥ tr·∫£i nghi·ªám t·ªët h∆°n!";
        } else {
            const displayName = profile.user_fullName || 'b·∫°n';
            personalGreeting = `${timeGreeting} ${displayName}!`;

            if (profile.role_name === 'ADMIN') {
                roleInfo = "B·∫°n ƒëang ƒëƒÉng nh·∫≠p v·ªõi quy·ªÅn Qu·∫£n tr·ªã vi√™n.";
            } else if (profile.role_name === 'SHOP_OWNER') {
                roleInfo = "B·∫°n ƒëang ƒëƒÉng nh·∫≠p v·ªõi t∆∞ c√°ch ch·ªß c·ª≠a h√†ng.";
            } else {
                roleInfo = "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Aliconcon!";
            }
        }

        // Add cart information if available
        let cartMessage = '';
        if (cartInfo && cartInfo.success && cartInfo.cartItemCount > 0) {
            cartMessage = `\n\nüõí **Gi·ªè h√†ng c·ªßa b·∫°n**: ${cartInfo.cartItemCount} s·∫£n ph·∫©m`;

            // Show a few cart items if available
            if (cartInfo.data && Array.isArray(cartInfo.data) && cartInfo.data.length > 0) {
                const firstItem = cartInfo.data[0];
                if (firstItem.cart_shop && firstItem.cart_shop.products && firstItem.cart_shop.products.length > 0) {
                    const product = firstItem.cart_shop.products[0];
                    cartMessage += `\n- ${product.product_name}: ${product.cart_quantity}x`;

                    if (cartInfo.data.length > 1 || firstItem.cart_shop.products.length > 1) {
                        cartMessage += `\n- ...v√† c√≤n nhi·ªÅu s·∫£n ph·∫©m kh√°c`;
                    }
                }
            }

            cartMessage += `\n\nüí° H·ªèi t√¥i v·ªÅ "gi·ªè h√†ng" ƒë·ªÉ xem chi ti·∫øt ho·∫∑c "thanh to√°n" ƒë·ªÉ ho√†n t·∫•t ƒë∆°n h√†ng!`;
        } else if (!profile.isGuest) {
            cartMessage = `\n\nüõí **Gi·ªè h√†ng tr·ªëng** - T√¨m s·∫£n ph·∫©m y√™u th√≠ch v√† th√™m v√†o gi·ªè h√†ng nh√©!`;
        }

        const features = [
            "üîç T√¨m ki·∫øm v√† kh√°m ph√° s·∫£n ph·∫©m",
            "üí∞ So s√°nh gi√° t·ª´ nhi·ªÅu c·ª≠a h√†ng",
            "‚≠ê Xem ƒë√°nh gi√° s·∫£n ph·∫©m",
            "üõí T∆∞ v·∫•n mua s·∫Øm th√¥ng minh",
            "üí≥ H∆∞·ªõng d·∫´n thanh to√°n",
            "üìû H·ªó tr·ª£ kh√°ch h√†ng 24/7"
        ];

        const contextInfo = context?.currentPage ? `\n\nüìç B·∫°n ƒëang ·ªü trang: ${context.currentPage}` : '';

        return `${personalGreeting}

${roleInfo}${cartMessage}

T√¥i l√† AI Assistant c·ªßa Aliconcon, s·∫µn s√†ng h·ªó tr·ª£ b·∫°n:

${features.join('\n')}

H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ s·∫£n ph·∫©m, d·ªãch v·ª•, ho·∫∑c c√°ch s·ª≠ d·ª•ng website! üòä${contextInfo}`;
    }

    // Handle chat messages with memory
    async handleChatMessage(ws: WebSocket, message: any, socketId: string): Promise<void> {
        const { content, context } = message;

        if (!content || !content.trim()) {
            this.sendToClient(ws, {
                type: 'error',
                message: 'Message content is required',
                timestamp: new Date().toISOString()
            });
            return;
        }

        // Send typing indicator
        this.sendToClient(ws, {
            type: 'typing',
            isTyping: true,
            timestamp: new Date().toISOString()
        });

        try {
            // Process the message with memory
            const response = await this.processQueryWithMemory(socketId, content.trim(), context);

            // Send AI response
            this.sendToClient(ws, {
                type: 'message',
                content: response,
                sender: 'ai',
                timestamp: new Date().toISOString(),
                markdown: true
            });

        } catch (error) {
            logger.error(`‚ùå Error processing chat message for ${socketId}:`, error);

            this.sendToClient(ws, {
                type: 'message',
                content: 'Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau.',
                sender: 'ai',
                timestamp: new Date().toISOString(),
                error: true
            });
        } finally {
            // Stop typing indicator
            this.sendToClient(ws, {
                type: 'typing',
                isTyping: false,
                timestamp: new Date().toISOString()
            });
        }
    }

    // Send message to specific client
    sendToClient(ws: WebSocket, data: any): void {
        if (ws.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify(data));
        }
    }

    // Broadcast message to all connected clients
    broadcast(data: any): void {
        this.connectedClients.forEach((socketId, client) => {
            this.sendToClient(client, data);
        });
    }

    async startChatLoop() {
        console.log("\nüõçÔ∏è Tr·ª£ l√Ω AI Aliconcon - N·ªÅn t·∫£ng Th∆∞∆°ng m·∫°i ƒêi·ªán t·ª≠ üõçÔ∏è");
        console.log("-".repeat(60));
        console.log("Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Aliconcon! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:");
        console.log("  ‚Ä¢ T√¨m hi·ªÉu v·ªÅ n·ªÅn t·∫£ng Aliconcon");
        console.log("  ‚Ä¢ Xem s·∫£n ph·∫©m ph·ªï bi·∫øn v√† b√°n ch·∫°y");
        console.log("  ‚Ä¢ H·ªó tr·ª£ th√¥ng tin mua s·∫Øm");
        console.log("  ‚Ä¢ Gi·∫£i ƒë√°p c√°c c√¢u h·ªèi v·ªÅ d·ªãch v·ª•");
        console.log("\nG√µ 'exit' ho·∫∑c 'quit' ƒë·ªÉ k·∫øt th√∫c.");
        console.log("G√µ 'models' ƒë·ªÉ xem g·ª£i √Ω models kh√°c.");
        console.log("-".repeat(60));
        console.log(`ü§ñ S·ª≠ d·ª•ng model: ${MODEL_NAME} (qua OpenRouter)`);
        console.log(`üß† Thinking traces: ${DISABLE_THINKING ? 'DISABLED' : 'ENABLED'}`);
        console.log(`üìä Redis Memory: ${conversationMemory.isRedisConnected() ? 'Connected' : 'Disconnected'}`);
        console.log(`üîí WebSocket Security: ${USE_WSS ? 'WSS (Secure)' : 'WS (Standard)'}`);
        console.log(`üåê WebSocket URL: ${USE_WSS ? 'wss' : 'ws'}://localhost:${WEBSOCKET_PORT}/chat`);

        // Check if using free model and warn about limitations
        if (MODEL_NAME.includes(':free')) {
            console.log("üí∞ Model mi·ªÖn ph√≠: Tool calling c√≥ th·ªÉ b·ªã h·∫°n ch·∫ø, s·ª≠ d·ª•ng ch·∫ø ƒë·ªô fallback");
        }

        console.log("-".repeat(60));

        const consoleSocketId = 'console_session';

        while (true) {
            try {
                const query = await this.rl.question("\nüí¨ C√¢u h·ªèi c·ªßa b·∫°n: ");

                if (query.toLowerCase().trim() === 'exit' ||
                    query.toLowerCase().trim() === 'quit' ||
                    query.toLowerCase().trim() === 'q') {
                    console.log("\nüëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• Aliconcon. H·∫πn g·∫∑p l·∫°i!");
                    break;
                }

                if (query.toLowerCase().trim() === 'models') {
                    this.showModelSuggestions();
                    continue;
                }

                if (query.toLowerCase().trim() === 'stats') {
                    const stats = await conversationMemory.getSessionStats(consoleSocketId);
                    const activeCount = await conversationMemory.getActiveSessionsCount();
                    console.log(`\nüìä Session Stats:`, stats);
                    console.log(`üîó Active Sessions: ${activeCount}`);
                    console.log(`üîí WSS Status: ${USE_WSS ? 'Enabled' : 'Disabled'}`);
                    console.log(`üìä Redis Status: ${conversationMemory.isRedisConnected() ? 'Connected' : 'Disconnected'}`);
                    continue;
                }

                if (query.trim()) {
                    console.log("üîç ƒêang x·ª≠ l√Ω c√¢u h·ªèi...");
                    try {
                        const response = await this.processQueryWithMemory(consoleSocketId, query);
                        console.log(`\nü§ñ Tr·ª£ l√Ω Aliconcon:\n${response}`);
                    } catch (error) {
                        console.log(`‚ùå L·ªói: ${error}`);
                        console.log("üí° Th·ª≠ g√µ 'models' ƒë·ªÉ xem g·ª£i √Ω models kh√°c");
                    }
                }
            } catch (error) {
                console.log(`‚ùå L·ªói: ${error}`);
                break;
            }
        }
    }

    showModelSuggestions() {
        console.log("\nü§ñ G·ª¢I √ù MODELS CHO ALICONCON MCP:");
        console.log("-".repeat(50));

        console.log("\nüí∞ MODELS MI·ªÑN PH√ç H·ªñ TR·ª¢ TOOL CALLING:");
        console.log("export LLM_MODEL='qwen/qwen3-30b-a3b:free'");
        console.log("export LLM_MODEL='meta-llama/llama-4-maverick:free'");
        console.log("export LLM_MODEL='google/gemini-2.5-pro:free'");

        console.log("\nüÜì MODELS MI·ªÑN PH√ç (FALLBACK MODE):");
        console.log("export LLM_MODEL='deepseek/deepseek-r1:free'");
        console.log("export LLM_MODEL='mistral/mistral-small-3.1:free'");

        console.log("\nüíé MODELS C√ì PH√ç M·∫†NH:");
        console.log("export LLM_MODEL='openai/gpt-4o'");
        console.log("export LLM_MODEL='anthropic/claude-3.5-sonnet'");
        console.log("export LLM_MODEL='google/gemini-2.5-pro'");

        console.log("\nüí° ƒê·ªÉ thay ƒë·ªïi model:");
        console.log("1. Tho√°t ch∆∞∆°ng tr√¨nh (Ctrl+C)");
        console.log("2. Ch·∫°y l·ªánh export ·ªü tr√™n");
        console.log("3. Kh·ªüi ƒë·ªông l·∫°i: bun run index.ts");
        console.log("-".repeat(50));
    }

    async cleanup() {
        this.rl.close();
        logger.info("üîå Closing MCP client...");

        // Close WebSocket server
        if (wss) {
            wss.close();
            logger.info("üîå WebSocket server closed");
        }

        // Close HTTP server
        if (httpServer) {
            httpServer.close();
            logger.info("üîå HTTP server closed");
        }

        // Close Redis connection
        await conversationMemory.close();
        logger.info("üîå Redis connection closed");
    }

    async handleGetConversationHistory(ws: WebSocket, socketId: string): Promise<void> {
        try {
            const history = await this.memoryStore.getConversationHistory(socketId, 20);

            this.sendToClient(ws, {
                type: 'conversation_history',
                history: history,
                timestamp: new Date().toISOString()
            });
        } catch (error: any) {
            console.error(`‚ùå [${socketId}] Error getting conversation history:`, error);
            this.sendToClient(ws, {
                type: 'error',
                message: 'Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i',
                error: error.message,
                timestamp: new Date().toISOString()
            });
        }
    }

    async handleClearConversation(ws: WebSocket, socketId: string): Promise<void> {
        try {
            await this.memoryStore.removeSession(socketId);

            this.sendToClient(ws, {
                type: 'conversation_cleared',
                message: 'ƒê√£ x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i',
                timestamp: new Date().toISOString()
            });
        } catch (error: any) {
            console.error(`‚ùå [${socketId}] Error clearing conversation:`, error);
            this.sendToClient(ws, {
                type: 'error',
                message: 'Kh√¥ng th·ªÉ x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i',
                error: error.message,
                timestamp: new Date().toISOString()
            });
        }
    }
}

async function main() {
    // Check OpenRouter API key
    if (!OPENROUTER_API_KEY) {
        console.error("‚ùå OPENROUTER_API_KEY is not set!");
        console.log("üí° H∆∞·ªõng d·∫´n:");
        console.log("1. Truy c·∫≠p https://openrouter.ai v√† ƒëƒÉng k√Ω t√†i kho·∫£n MI·ªÑN PH√ç");
        console.log("2. L·∫•y API key t·ª´ dashboard");
        console.log("3. ƒê·∫∑t bi·∫øn m√¥i tr∆∞·ªùng: export OPENROUTER_API_KEY=your_api_key");
        process.exit(1);
    }

    const client = new AliconconMCPClient();

    try {
        // Connect to MCP server
        const connected = await client.connectToServer();
        if (!connected) {
            console.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn MCP server");
            console.log("üí° ƒê·∫£m b·∫£o MCP server ƒëang ch·∫°y:");
            console.log("cd server-mcp && bun run server.ts");
            process.exit(1);
        }

        // Start WebSocket server
        await client.startWebSocketServer();

        // Start console chat loop
        await client.startChatLoop();

    } catch (error) {
        console.error("‚ùå L·ªói:", error);
    } finally {
        await client.cleanup();
    }
}

// Handle process termination
process.on('SIGINT', async () => {
    console.log("\nüëã ƒêang tho√°t...");
    process.exit(0);
});

process.on('SIGTERM', async () => {
    console.log("\nüëã ƒêang tho√°t...");
    process.exit(0);
});

// Run the application
if (import.meta.main) {
    main().catch(console.error);
}