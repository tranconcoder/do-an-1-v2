import { z } from "zod";
import { apiService } from '../services/api.js';

export const getPopularProductsTool = {
    name: "get-popular-products",
    description: "L·∫•y danh s√°ch s·∫£n ph·∫©m ph·ªï bi·∫øn hi·ªán t·∫°i tr√™n n·ªÅn t·∫£ng v·ªõi ƒë·ªãnh d·∫°ng table markdown",
    inputSchema: {
        limit: z.number().min(1).max(50).default(10).describe("S·ªë l∆∞·ª£ng s·∫£n ph·∫©m mu·ªën l·∫•y (1-50, m·∫∑c ƒë·ªãnh: 10)"),
        showTable: z.boolean().default(true).describe("Hi·ªÉn th·ªã k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng table markdown (m·∫∑c ƒë·ªãnh: true)")
    },
    handler: async ({ limit = 10, showTable = true }: { limit?: number, showTable?: boolean }) => {
        try {
            console.log(`üî• [get-popular-products] Fetching ${limit} popular products...`);

            const response = await apiService.getPopularProducts(1, limit);

            console.log('‚úÖ [get-popular-products] API response received');

            if (!response.metadata || !Array.isArray(response.metadata)) {
                throw new Error('Invalid response format');
            }

            const products = response.metadata;

            if (showTable) {
                // Create beautiful markdown table
                let markdownTable = `# üî• Top ${products.length} S·∫£n Ph·∫©m Ph·ªï Bi·∫øn\n\n`;
                markdownTable += `*D·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t th·ªùi gian th·ª±c t·ª´ h·ªá th·ªëng Aliconcon*\n\n`;

                // Table header
                markdownTable += `| # | S·∫£n ph·∫©m | Gi√° b√°n | ƒê√£ b√°n | ƒê√°nh gi√° | C·ª≠a h√†ng | T√¨nh tr·∫°ng |\n`;
                markdownTable += `|---|----------|---------|--------|----------|----------|------------|\n`;

                // Table rows
                products.forEach((product: any, index: number) => {
                    const ranking = index + 1;
                    const name = product.product_name || 'N/A';
                    const price = product.sku?.sku_price
                        ? new Intl.NumberFormat('vi-VN', {
                            style: 'currency',
                            currency: 'VND'
                        }).format(product.sku.sku_price)
                        : 'Li√™n h·ªá';
                    const sold = product.product_sold || 0;
                    const rating = product.product_rating_avg
                        ? '‚≠ê'.repeat(Math.round(product.product_rating_avg))
                        : 'Ch∆∞a c√≥';
                    const shop = product.shop?.shop_name || 'N/A';
                    const stock = product.sku?.sku_stock
                        ? (product.sku.sku_stock > 0 ? '‚úÖ C√≤n h√†ng' : '‚ùå H·∫øt h√†ng')
                        : '‚ùì Ch∆∞a r√µ';

                    markdownTable += `| ${ranking} | ${name} | ${price} | ${sold.toLocaleString()} | ${rating} | ${shop} | ${stock} |\n`;
                });

                markdownTable += `\n---\n\n`;
                markdownTable += `üìä **Th·ªëng k√™**: Hi·ªÉn th·ªã ${products.length} s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t\n`;
                markdownTable += `üïí **C·∫≠p nh·∫≠t**: ${new Date().toLocaleString('vi-VN')}\n`;
                markdownTable += `üí° **G·ª£i √Ω**: Nh·∫•p v√†o t√™n s·∫£n ph·∫©m ƒë·ªÉ xem chi ti·∫øt!\n\n`;
                markdownTable += `üõí Mu·ªën mua s·∫£n ph·∫©m n√†o? H·ªèi t√¥i: *"T√¥i mu·ªën mua [t√™n s·∫£n ph·∫©m]"*`;

                return {
                    content: [
                        {
                            type: "text" as const,
                            text: markdownTable
                        }
                    ]
                };
            } else {
                // Return JSON format
                return {
                    content: [
                        {
                            type: "text" as const,
                            text: JSON.stringify({
                                success: true,
                                message: `T√¨m th·∫•y ${products.length} s·∫£n ph·∫©m ph·ªï bi·∫øn`,
                                data: products,
                                limit: limit,
                                timestamp: new Date().toISOString()
                            }, null, 2)
                        }
                    ]
                };
            }

        } catch (error: any) {
            console.error('Error getting popular products:', error);

            const errorMarkdown = `# ‚ùå Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m ph·ªï bi·∫øn

**L·ªói**: ${error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}

## üîß C√°c b∆∞·ªõc kh·∫Øc ph·ª•c:

1. **Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng** - ƒê·∫£m b·∫£o internet ·ªïn ƒë·ªãnh
2. **Th·ª≠ l·∫°i sau** - Server c√≥ th·ªÉ ƒëang b·∫≠n
3. **Li√™n h·ªá h·ªó tr·ª£** - N·∫øu l·ªói v·∫´n ti·∫øp di·ªÖn

---

üí° **Thay th·∫ø**: B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:
- Th√¥ng tin s·∫£n ph·∫©m c·ª• th·ªÉ
- Danh m·ª•c s·∫£n ph·∫©m  
- Khuy·∫øn m√£i hi·ªán t·∫°i

[üè† V·ªÅ trang ch·ªß](/) | [üìû H·ªó tr·ª£](/support)`;

            return {
                content: [
                    {
                        type: "text" as const,
                        text: errorMarkdown
                    }
                ]
            };
        }
    }
}; 